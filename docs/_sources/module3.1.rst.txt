


Module 3.1 - Parallelism
=============================================


Module 3.1
------------

  Efficiency 
  
Parallel
========

Parallel
---------

.. revealjs_fragments::

   * Run code on multiple threads
   * Particularly suited for map / zip
   * Baby steps towards GPU


Parallel Range
---------------

.. revealjs_fragments::

   * Replace `for` loops with parallel version
   * Tells compiler it can run in any order
   * Be careful! Ideally these loops don't change anything

Code Transformation
----------------------

Transform ::

  def my_code(x, y):
     for i in prange(100):
         x[i] = y + 20
  ...
  my_code(x, y)
  fast_my_code = numba.njit(parallel=True)(my_code)
  fast_my_code(x, y)
  fast_my_code(x, y)



Nondeterminism
----------------

.. revealjs_fragments::

   * No guarantee on ordering
   * Need to be careful with reductions
   * Speedups will depend on system



Parallel Bugs
-------------

.. revealjs_fragments::

   * Warning! Nasty bugs
   * Tests failing randomly
   * Crashes due to out-of-bounds


Parallel Diagnostics
---------------------

* Diagnostics give parallel compilation
* Useful to see if you are getting benefits

Operator Fusion
================

User API
---------

* Basic mathematical operations
* Chained together as boxes with broadcasting
* Optimize within each individually


Fusion
-------

* Optimization across operator boundary
* Save speed or memory in by avoiding extra forward/backward
* Can open even great optimization gains

Automatic Fusion
----------------

* Compiled language can automatically fuse operators
* Major area of research
* Example: TVM, XLA, ONXX

Automatic Fusion
----------------

.. image:: expgraph2.png
           :align: center


Manual Fusion
--------------

* Utilize a pre-fused operator when needed
* Standard libraries for implementations



Example: Matmul
-------------------
.. image:: figs/Ops/matmul3d1.png
           :align: center

Example: Matmul
-------------------

.. image:: figs/Ops/matmul3d2.png
           :align: center

Matmul Simple
-------------------

.. image:: figs/Ops/matmulsimple.png
           :align: center

Advantages
-----------

* No three dimensional intermediate
* No `save_for_backwards`
* Can use core matmul libraries (in the future)


Computations
-----------------
.. image:: figs/Ops/matmul.png
           :align: center


Starter Code
-------------

* Walk through output.
* Find row and column of input
* Simultaneous zip / reduce.

Example: Matmul
-------------------

.. image:: figs/Ops/matmul\ back.png
           :align: center


Matrix Multiply
---------------
.. math::

   \begin{eqnarray*}
   f(M, N) &=&  M N \\
   g'_M(f(M, N)) &=&  \text{grad}_{\text{out}} N^\top \\
   g'_N(f(M, N)) &=&  M^\top \text{grad}_{\text{out}}
   \end{eqnarray*}

Simple Matmul
-------------------

Code ::

  A.shape == (I, J)
  B.shape == (J, K)
  out.shape == (I, K)


Simple Matmul Pseudocode
-------------------------

Code ::

  for outer_index in out.indices():
      for inner_val in range(J):
          out[outer_index] += A[outer_index[0], inner_val] * \
                              B[inner_val, outer_index[1]]


Complexities
-------------

* Indices to strides
* Minimizing index operations
* Broadcasting


Matmul Speedups
-------------------------

What can be parallelized? ::

  for outer_index in out.indices():
      for inner_val in range(J):
          out[outer_index] += A[outer_index[0], inner_val] * \
                              B[inner_val, outer_index[1]]

Compare to zip / reduce
-----------------------

Code ::

  ZIP STEP
  C = zeros(broadcast_shape(A.view(I, J, 1), B.view(1, J, K)))
  for C_outer in C.indices():
      C[C_out] = A[outer_index[0], inner_val] * \
                 B[inner_val, outer_index[1]]
  REDUCE STEP
  for outer_index in out.indices():
     for inner_val in range(J):
        out[outer_index] = C[outer_index[0], inner_val,
                             outer_index[1]]

Matrix Multiply
---------------
.. math::

   \begin{eqnarray*}
   f(M, N) &=&  M N \\
   g'_M(f(M, N)) &=&  \text{grad}_{\text{out}} N^\top \\
   g'_N(f(M, N)) &=&  M^\top \text{grad}_{\text{out}}
   \end{eqnarray*}


GPUs
=====

Popularizing GPUs
------------------

.. image:: nvidia.jpg
           :width: 300px
           :align: center

NVidia - 25 Years
-----------------

.. image:: nvidiastock.png
           :align: center


Main Driver
-----------------

.. image:: videogame.png
           :align: center

Programming Video Games
------------------------

* Custom shader languages
* Graphics targeted operations

General Purpose GPUs
---------------------

.. revealjs_fragments::

   * NVidia: can we make these programmable
   * ~2008: CUDA langauge
   * Maybe something world changing...

Maybe?
--------

.. image:: bitcoin-img.svg
           :align: center

(Not totally kidding)
---------------------

.. image:: bitcoin.png
           :width: 500px
           :align: center

Machine Learning
-----------------

.. revealjs_fragments::

   * Growth in ML parallels GPU development
   * Major deep learning results require GPU
   * All modern training is on GPU (or more)

ML
---

.. image:: translate.gif
           :align: center


Is this enough?
----------------

.. image:: gpus.png
           :align: center


GPUs
------

.. image:: 3090.png
           :align: center



