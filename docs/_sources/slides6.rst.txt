
.. raw:: html

   <link rel="stylesheet" href="_static/revealjs/css/theme/white.css">
   <link rel="stylesheet" href="_static/default.css">


Machine Learning Engineering
=============================================


Lecture 6
------------

  Mini-ML 2


Lecture
=========


Lecture Quiz
-------------

  `Quiz <https://canvas.cornell.edu/courses/20583/assignments/155694>`_


Outline
---------

.. revealjs_fragments::

   * Losses
   * Model Fit
   * Derivatives

Review: Model
--------------

*  https://minitorch.github.io/mlprimer.html

.. image:: figs/Graphs/model1.png
           :align: center
           :width: 350px


Review: Parameters
------------------


a. rotating the linear separator ("slope")


.. image:: figs/Graphs/weight.png
           :align: center
           :width: 500px

Review: Parameters
------------------

b. changing the separator cutoff ("intercept")

.. image:: figs/Graphs/bias.png
           :align: center
           :width: 500px

Math
------------------

* Linear Model

.. math::
   m(x; w, b) = x_1 \times w_1 + x_2 \times w_2 + b


.. code::

   def make_linear_model(w, b):
       def model(x):
           return 1 if (x[0] * w[0] + x[1] * w[1] + b > 0.0) else 0
       return model
   linear_model = make_linear_model([0.1, -0.2], 0.0)
   linear_model(x)



Loss
=====



Model on Data
--------------

.. image:: figs/Graphs/sector2.png
           :align: center
           :width: 350px


Model on Data
--------------

.. image:: figs/Graphs/incorrect.png
           :align: center
           :width: 350px

Distance
--------------


.. image:: figs/Graphs/distance.png
           :align: center
           :width: 350px

* :math:`|m(x)|` correct or incorrect


Point 1
--------

.. image:: figs/Graphs/pt3.png
           :align: center
           :width: 450px

Point 2
--------


.. image:: figs/Graphs/pt1.png
           :align: center
           :width: 450px

Point 3
--------

.. image:: figs/Graphs/pt2.png
           :align: center
           :width: 450px

Loss
--------

.. revealjs_fragments::

   * Loss weights our incorrect points
   * Function of distance from boundary

     :math:`L(w_1, w_2, b)` is loss, function of parameters.


Sigmoid Loss
--------------

.. image:: figs/Graphs/sigmoid.png
           :align: center
           :width: 600px

.. revealjs_fragments::

   * Weight distance by sigmoid
   * Combines loss of all points

Loss as function of Parameters
--------

.. image:: figs/Graphs/pt3.png
           :align: center
           :width: 200px
.. image:: figs/Graphs/pt1.png
           :align: center
           :width: 200px
.. image:: figs/Graphs/pt2.png
           :align: center
           :width: 200px




.. image:: figs/Graphs/sigmoid2.png
           :align: center
           :width: 600px



Model Fitting
=============


Start
------------------------------------

.. image:: figs/Graphs/incorrect.png
           :align: center
           :width: 350px


Goal
-----

.. revealjs_fragments::

   * Find parameters that minimize loss
   * Finalize a fixed model

Fitting
-----------------

.. revealjs_fragments::

   * Field of optimization
   * Many, many different approaches
   * Our focus: `gradient descent`


Parameter Fitting
------------------------------------

1. Compute the loss function, :math:`L(w_1, w_2, b)`
2. See how small changes would change the loss
3. Update to parameters to locally reduce the loss


Step 1: Compute Loss
------------------------------------

.. image:: figs/Graphs/pt2.png
           :align: center
           :width: 200px


.. image:: figs/Graphs/sigmoid.png
           :align: center
           :width: 500px

Step 2: Find Direction
-------------------------

.. image:: figs/Graphs/bias.png
           :align: center
           :width: 400px



Step 3: Update Parameters
------------------------------------


.. image:: figs/Graphs/move.png
           :align: center
           :width: 400px

Hard Issues
------------------------------------

.. revealjs_fragments::

   * Local update, may get stuck for some models
   * How much do we move?
   * Can we do better?

Easier Issue
------------------------------------

.. revealjs_fragments::

   * How do we find good directions?


Derivatives
=============


Function Notation
------------------

.. math ::

   f(x) = \sin(2 x)


.. math ::

   g(x) = x + 10




Derivative Notation
--------------------

.. math ::

    f'(x) = 2 \times \cos(2 x)

.. math ::

    g'(x) = 1

Multiple Arguments
--------------------

.. math ::

   f(x, y) = x + 2 y

Subscript indicates variable

.. math ::

   f'_x(x, y) = 1

.. math ::

   f'_y(x, y) = 2


Intuition: Derivative
-----------------------

.. math ::

   f(x) = x^2

.. image:: figs/Grad/function.png
           :align: center


Intuition: Derivative
-----------------------

* Slope of tangeant line

.. math ::

   f'(x) = 2x

.. image:: figs/Grad/tangent.png
           :align: center

Derivative Types
===================


Symbolic Derivative
---------------------

.. math ::

   f(x) = \sin(2 x)


.. math ::

    f'(x) = 2 \times \cos(2 x)

* `Differentiation Rules <https://en.wikipedia.org/wiki/Differentiation_rules>`_

Issues
--------


How do we handle higher-order functions? ::

   def derivative(fn):
       def inner(x):
           ...
       return inner

   d_f = derivative(f)


Definition of Derivative: Geometry
----------------------------------


.. image:: figs/Grad/tangent.png
           :align: center


.. math ::

    f'(x) = \lim_{\epsilon \rightarrow 0} \frac{f(x + \epsilon) - f(x)}{\epsilon}


Central Difference
--------------------

.. math ::

    f'(x) \approx  \frac{f(x + \epsilon) - f(x-\epsilon)}{2\epsilon}


Approximating Derivative
----------------------------------

.. image:: figs/Grad/approx.png
           :align: center



Q&A
====
